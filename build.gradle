plugins {
    id 'org.springframework.boot' version '2.5.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'jacoco'
    id 'org.jetbrains.kotlin.jvm' version '1.6.0'
    id "org.jetbrains.kotlin.plugin.allopen" version "1.6.0"
    id "org.jetbrains.kotlin.plugin.spring" version "1.6.0"
}

group = 'com.avilapps'
version = '0.0.1-SNAPSHOT'
description = 'pdf-services'
sourceCompatibility = '11'

sourceSets {
    main.kotlin.srcDirs += 'src/main/kotlin'
    main.java.srcDirs += 'src/main/java'
}

//kotlin.jvm.target.validation.mode = error

repositories {
    mavenCentral()
}

dependencies {
    implementation platform('software.amazon.awssdk:bom:2.17.102')
    implementation 'software.amazon.awssdk:s3'

    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'com.amazonaws:aws-java-sdk-s3:1.12.48'
    implementation 'org.apache.pdfbox:pdfbox:2.0.24'

    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8:1.6.0'
    implementation 'org.jetbrains.kotlin:kotlin-reflect:1.6.0'
    implementation 'com.fasterxml.jackson.module:jackson-module-kotlin:2.13.0'

    implementation 'org.mapstruct:mapstruct:1.4.2.Final'
    annotationProcessor 'org.mapstruct:mapstruct-processor:1.4.2.Final'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.enabled = true
        csv.enabled = true
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.8
            }
            excludes = [
                    'com.avilapps.pdf_services.api.delegate.DocumentDelegate',
                    'com.avilapps.pdf_services.common.*',
                    'com.avilapps.pdf_services.domain.services.DocumentService',
                    'com.avilapps.pdf_services.domain.service.FoliationService',
                    'com.avilapps.pdf_services.PdfServicesApplication',
                    'com.avilapps.pdf_services.ServletInitializer'
            ]
        }
    }
}

check.dependsOn jacocoTestCoverageVerification

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = '11'
    }
}

task stage(dependsOn: ['build', 'clean'])
build.mustRunAfter clean
